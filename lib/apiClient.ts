/**
 * @generated by codex.chatfleet
 * ChatFleet frontend API bindings (OpenAPI 0.1.1 subset)
 */
import { request } from "@/lib/http";
import type {
  AdminCreateUserRequest,
  AdminConfigResponse,
  RagCreateRequest,
  RagCreateResponse,
  AuthResponse,
  RagDeleteResponse,
  ChatRequest,
  ChatResponse,
  JobAccepted,
  JobStatusResponse,
  LoginRequest,
  RagDocsResponse,
  RagListResponse,
  RagUploadAccepted,
  RagUserUpsertRequest,
  RagUserUpsertResponse,
  RegisterRequest,
  UsersListResponse,
  RagUsersResponse,
} from "@/schemas";
import {
  AdminConfigResponse as AdminConfigSchema,
  AuthResponse as AuthResponseSchema,
  ChatResponse as ChatResponseSchema,
  JobAccepted as JobAcceptedSchema,
  JobStatusResponse as JobStatusSchema,
  RagDocsResponse as RagDocsSchema,
  RagDeleteResponse as RagDeleteResponseSchema,
  RagListResponse as RagListSchema,
  RagUploadAccepted as RagUploadAcceptedSchema,
  RagCreateResponse as RagCreateResponseSchema,
  RagUserUpsertResponse as RagUserUpsertResponseSchema,
  UsersListResponse as UsersListSchema,
  RagUsersResponse as RagUsersSchema,
} from "@/schemas";

export async function register(body: RegisterRequest) {
  return request<AuthResponse>({
    path: "/auth/register",
    method: "POST",
    body,
    schema: AuthResponseSchema,
  });
}

export async function login(body: LoginRequest) {
  return request<AuthResponse>({
    path: "/auth/login",
    method: "POST",
    body,
    schema: AuthResponseSchema,
  });
}

export async function me(token: string) {
  return request<AuthResponse["user"]>({
    path: "/auth/me",
    method: "GET",
    token,
    schema: AuthResponseSchema.shape.user,
  });
}

export async function listRags(token: string, params?: { limit?: number; cursor?: string }) {
  const search = new URLSearchParams();
  if (params?.limit) search.set("limit", String(params.limit));
  if (params?.cursor) search.set("cursor", params.cursor);
  const suffix = search.toString() ? `?${search.toString()}` : "";
  return request<RagListResponse>({
    path: `/rag/list${suffix}`,
    method: "GET",
    token,
    schema: RagListSchema,
  });
}

export async function listAdminRags(token: string, params?: { limit?: number; cursor?: string }) {
  const search = new URLSearchParams();
  if (params?.limit) search.set("limit", String(params.limit));
  if (params?.cursor) search.set("cursor", params.cursor);
  const suffix = search.toString() ? `?${search.toString()}` : "";
  return request<RagListResponse>({
    path: `/admin/rag/list${suffix}`,
    method: "GET",
    token,
    schema: RagListSchema,
  });
}

export async function getRagDocs(token: string, ragSlug: string) {
  const search = new URLSearchParams({ rag_slug: ragSlug });
  return request<RagDocsResponse>({
    path: `/rag/docs?${search.toString()}`,
    method: "GET",
    token,
    schema: RagDocsSchema,
  });
}

export async function uploadRagDocs(token: string, ragSlug: string, files: File[]) {
  const form = new FormData();
  form.append("rag_slug", ragSlug);
  files.forEach((file) => form.append("files", file));
  return request<RagUploadAccepted>({
    path: "/rag/upload",
    method: "POST",
    token,
    body: form,
    schema: RagUploadAcceptedSchema,
  });
}

export async function rebuildRag(token: string, ragSlug: string) {
  return request<JobAccepted>({
    path: "/rag/rebuild",
    method: "POST",
    token,
    body: { rag_slug: ragSlug },
    schema: JobAcceptedSchema,
  });
}

export async function resetRag(token: string, ragSlug: string) {
  return request<JobAccepted>({
    path: "/rag/reset",
    method: "POST",
    token,
    body: { rag_slug: ragSlug, confirm: true },
    schema: JobAcceptedSchema,
  });
}

export async function getJob(token: string, jobId: string) {
  return request<JobStatusResponse>({
    path: `/jobs/${jobId}`,
    method: "GET",
    token,
    schema: JobStatusSchema,
  });
}

export async function chat(token: string, body: ChatRequest) {
  return request<ChatResponse>({
    path: "/chat",
    method: "POST",
    token,
    body,
    schema: ChatResponseSchema,
  });
}

export async function listRagUsers(token: string, ragSlug: string) {
  const search = new URLSearchParams({ rag_slug: ragSlug });
  return request<RagUsersResponse>({
    path: `/rag/users?${search.toString()}`,
    method: "GET",
    token,
    schema: RagUsersSchema,
  });
}

export async function addRagUser(token: string, body: RagUserUpsertRequest) {
  return request<RagUserUpsertResponse>({
    path: "/rag/users/add",
    method: "POST",
    token,
    body,
    schema: RagUserUpsertResponseSchema,
  });
}

export async function removeRagUser(token: string, body: RagUserUpsertRequest) {
  return request<RagUserUpsertResponse>({
    path: "/rag/users/remove",
    method: "POST",
    token,
    body,
    schema: RagUserUpsertResponseSchema,
  });
}

export async function deleteRag(token: string, ragSlug: string, confirmation: string) {
  return request<RagDeleteResponse>({
    path: "/admin/rag/delete",
    method: "POST",
    token,
    body: { rag_slug: ragSlug, confirmation },
    schema: RagDeleteResponseSchema,
  });
}

export async function adminListUsers(token: string, params?: { limit?: number; cursor?: string }) {
  const search = new URLSearchParams();
  if (params?.limit) search.set("limit", String(params.limit));
  if (params?.cursor) search.set("cursor", params.cursor);
  const suffix = search.toString() ? `?${search.toString()}` : "";
  return request<UsersListResponse>({
    path: `/admin/users${suffix}`,
    method: "GET",
    token,
    schema: UsersListSchema,
  });
}

export async function adminCreateUser(
  token: string,
  body: AdminCreateUserRequest,
) {
  return request<UsersListResponse["items"][number]>({
    path: "/admin/users",
    method: "POST",
    token,
    body,
    schema: UsersListSchema.shape.items.element,
  });
}

export async function adminConfig(token: string) {
  return request<AdminConfigResponse>({
    path: "/admin/config",
    method: "GET",
    token,
    schema: AdminConfigSchema,
  });
}

export async function createRag(token: string, body: RagCreateRequest) {
  return request<RagCreateResponse>({
    path: "/rag",
    method: "POST",
    token,
    body,
    schema: RagCreateResponseSchema,
  });
}
